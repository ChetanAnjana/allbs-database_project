{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cheta\\\\Desktop\\\\BookSharing-testing\\\\src\\\\screens\\\\MessageScreen.js\",\n  _s = $RefreshSig$();\nimport './MessageScreen.css';\nimport React, { useContext, useReducer, useState, useEffect } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { Store } from '../Store';\nimport { toast } from 'react-toastify';\nimport { getError } from '../utils';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageScreen = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const submitHandler = async e => {\n    e.preventDefault();\n    try {\n      const {\n        data\n      } = await axios.put('/api/users/message');\n      // dispatch({\n      //   type: 'UPDATE_SUCCESS',\n      // })\n      // ctxDispatch({ type: 'USER_SIGNIN', payload: data })\n      // localStorage.setItem('userInfo', JSON.stringify(data))\n      toast.success('User updated successfully');\n    } catch (err) {\n      // dispatch({\n      //   type: 'FETCH_FAIL',\n      // })\n      toast.error(getError(err));\n    }\n  };\n  useEffect(() => {\n    // Fetch messages from your API or database here\n    // For now, let's use some hardcoded messages\n    setMessages([{\n      id: 1,\n      sender: 'user1',\n      content: 'Hello, I am interested in buying your book.'\n    }, {\n      id: 2,\n      sender: 'user2',\n      content: 'Hi, sure! The book is still available.'\n    }]);\n  }, []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    // Save the message to your API or database here\n    const newMessage = {\n      id: messages.length + 1,\n      sender: 'user1',\n      content: input\n    };\n    setMessages([...messages, newMessage]);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messageScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageScreen__header\",\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageScreen__messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `messageScreen__message ${message.sender}`,\n        children: message.content\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"messageScreen__inputForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"messageScreen__input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"messageScreen__sendButton\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageScreen, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = MessageScreen;\nexport default MessageScreen;\nvar _c;\n$RefreshReg$(_c, \"MessageScreen\");","map":{"version":3,"names":["React","useContext","useReducer","useState","useEffect","Helmet","Form","Button","Store","toast","getError","axios","jsxDEV","_jsxDEV","MessageScreen","_s","messages","setMessages","input","setInput","submitHandler","e","preventDefault","data","put","success","err","error","id","sender","content","handleSubmit","trim","newMessage","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/cheta/Desktop/BookSharing-testing/src/screens/MessageScreen.js"],"sourcesContent":["import './MessageScreen.css';\nimport React, { useContext, useReducer, useState, useEffect } from 'react'\nimport { Helmet } from 'react-helmet-async'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport { Store } from '../Store'\nimport { toast } from 'react-toastify'\nimport { getError } from '../utils'\nimport axios from 'axios'\n\nconst MessageScreen = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const submitHandler = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.put(\n        '/api/users/message',\n        \n      )\n      // dispatch({\n      //   type: 'UPDATE_SUCCESS',\n      // })\n      // ctxDispatch({ type: 'USER_SIGNIN', payload: data })\n      // localStorage.setItem('userInfo', JSON.stringify(data))\n      toast.success('User updated successfully')\n    } catch (err) {\n      // dispatch({\n      //   type: 'FETCH_FAIL',\n      // })\n      toast.error(getError(err))\n    }\n  }\n  useEffect(() => {\n    // Fetch messages from your API or database here\n    // For now, let's use some hardcoded messages\n    setMessages([\n      { id: 1, sender: 'user1', content: 'Hello, I am interested in buying your book.' },\n      { id: 2, sender: 'user2', content: 'Hi, sure! The book is still available.' },\n    ]);\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    // Save the message to your API or database here\n    const newMessage = { id: messages.length + 1, sender: 'user1', content: input };\n    setMessages([...messages, newMessage]);\n    setInput('');\n  };\n\n  return (\n    <div className=\"messageScreen\">\n      <div className=\"messageScreen__header\">Messages</div>\n      <div className=\"messageScreen__messages\">\n        {messages.map((message) => (\n          <div key={message.id} className={`messageScreen__message ${message.sender}`}>\n            {message.content}\n          </div>\n        ))}\n      </div>\n      <form className=\"messageScreen__inputForm\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"messageScreen__input\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button type=\"submit\" className=\"messageScreen__sendButton\">\n          Send\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MessageScreen;"],"mappings":";;AAAA,OAAO,qBAAqB;AAC5B,OAAOA,KAAK,IAAIC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1E,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,QAAQ,QAAQ,UAAU;AACnC,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMiB,aAAa,GAAG,MAAOC,CAAC,IAAK;IACjCA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAI;MACF,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAC9B,oBAAoB,CAErB;MACD;MACA;MACA;MACA;MACA;MACAf,KAAK,CAACgB,OAAO,CAAC,2BAA2B,CAAC;IAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ;MACA;MACA;MACAjB,KAAK,CAACkB,KAAK,CAACjB,QAAQ,CAACgB,GAAG,CAAC,CAAC;IAC5B;EACF,CAAC;EACDtB,SAAS,CAAC,MAAM;IACd;IACA;IACAa,WAAW,CAAC,CACV;MAAEW,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAA8C,CAAC,EAClF;MAAEF,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAyC,CAAC,CAC9E,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAIV,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIJ,KAAK,CAACc,IAAI,EAAE,KAAK,EAAE,EAAE;;IAEzB;IACA,MAAMC,UAAU,GAAG;MAAEL,EAAE,EAAEZ,QAAQ,CAACkB,MAAM,GAAG,CAAC;MAAEL,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAEZ;IAAM,CAAC;IAC/ED,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEiB,UAAU,CAAC,CAAC;IACtCd,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACEN,OAAA;IAAKsB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BvB,OAAA;MAAKsB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACrD3B,OAAA;MAAKsB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EACrCpB,QAAQ,CAACyB,GAAG,CAAEC,OAAO,iBACpB7B,OAAA;QAAsBsB,SAAS,EAAG,0BAAyBO,OAAO,CAACb,MAAO,EAAE;QAAAO,QAAA,EACzEM,OAAO,CAACZ;MAAO,GADRY,OAAO,CAACd,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGrB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACN3B,OAAA;MAAMsB,SAAS,EAAC,0BAA0B;MAACQ,QAAQ,EAAEZ,YAAa;MAAAK,QAAA,gBAChEvB,OAAA;QACE+B,IAAI,EAAC,MAAM;QACXT,SAAS,EAAC,sBAAsB;QAChCU,KAAK,EAAE3B,KAAM;QACb4B,QAAQ,EAAGzB,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAAC0B,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAsB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClC,eACF3B,OAAA;QAAQ+B,IAAI,EAAC,QAAQ;QAACT,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAE5D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV,CAAC;AAACzB,EAAA,CAlEID,aAAa;AAAAmC,EAAA,GAAbnC,aAAa;AAoEnB,eAAeA,aAAa;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}