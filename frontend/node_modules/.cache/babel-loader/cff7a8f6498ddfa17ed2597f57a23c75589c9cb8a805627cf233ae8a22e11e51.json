{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cheta\\\\Downloads\\\\BookSharing-master\\\\BookSharing-master\\\\frontend\\\\src\\\\screens\\\\MessageScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MessageScreen.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageScreen = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // Fetch messages from your API or database here\n    // For now, let's use some hardcoded messages\n    setMessages([{\n      id: 1,\n      sender: 'user1',\n      content: 'Hello, I am interested in buying your book.'\n    }, {\n      id: 2,\n      sender: 'user2',\n      content: 'Hi, sure! The book is still available.'\n    }]);\n  }, []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() === '') return;\n\n    // Save the message to your API or database here\n    const newMessage = {\n      id: messages.length + 1,\n      sender: 'user1',\n      content: input\n    };\n    setMessages([...messages, newMessage]);\n    setInput('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messageScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageScreen__header\",\n      children: \"Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messageScreen__messages\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `messageScreen__message ${message.sender}`,\n        children: message.content\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"messageScreen__inputForm\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"messageScreen__input\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"messageScreen__sendButton\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(MessageScreen, \"9O8vdW2/zxnqNWKJ7NIr/2i0F2U=\");\n_c = MessageScreen;\nexport default MessageScreen;\nvar _c;\n$RefreshReg$(_c, \"MessageScreen\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MessageScreen","_s","messages","setMessages","input","setInput","id","sender","content","handleSubmit","e","preventDefault","trim","newMessage","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","onSubmit","type","value","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/cheta/Downloads/BookSharing-master/BookSharing-master/frontend/src/screens/MessageScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MessageScreen.css';\r\n\r\nconst MessageScreen = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [input, setInput] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch messages from your API or database here\r\n    // For now, let's use some hardcoded messages\r\n    setMessages([\r\n      { id: 1, sender: 'user1', content: 'Hello, I am interested in buying your book.' },\r\n      { id: 2, sender: 'user2', content: 'Hi, sure! The book is still available.' },\r\n    ]);\r\n  }, []);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (input.trim() === '') return;\r\n\r\n    // Save the message to your API or database here\r\n    const newMessage = { id: messages.length + 1, sender: 'user1', content: input };\r\n    setMessages([...messages, newMessage]);\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"messageScreen\">\r\n      <div className=\"messageScreen__header\">Messages</div>\r\n      <div className=\"messageScreen__messages\">\r\n        {messages.map((message) => (\r\n          <div key={message.id} className={`messageScreen__message ${message.sender}`}>\r\n            {message.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <form className=\"messageScreen__inputForm\" onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"messageScreen__input\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          placeholder=\"Type your message...\"\r\n        />\r\n        <button type=\"submit\" className=\"messageScreen__sendButton\">\r\n          Send\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessageScreen;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA;IACAM,WAAW,CAAC,CACV;MAAEG,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAA8C,CAAC,EAClF;MAAEF,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE;IAAyC,CAAC,CAC9E,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB,IAAIP,KAAK,CAACQ,IAAI,EAAE,KAAK,EAAE,EAAE;;IAEzB;IACA,MAAMC,UAAU,GAAG;MAAEP,EAAE,EAAEJ,QAAQ,CAACY,MAAM,GAAG,CAAC;MAAEP,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAEJ;IAAM,CAAC;IAC/ED,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEW,UAAU,CAAC,CAAC;IACtCR,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACEN,OAAA;IAAKgB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BjB,OAAA;MAAKgB,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACrDrB,OAAA;MAAKgB,SAAS,EAAC,yBAAyB;MAAAC,QAAA,EACrCd,QAAQ,CAACmB,GAAG,CAAEC,OAAO,iBACpBvB,OAAA;QAAsBgB,SAAS,EAAG,0BAAyBO,OAAO,CAACf,MAAO,EAAE;QAAAS,QAAA,EACzEM,OAAO,CAACd;MAAO,GADRc,OAAO,CAAChB,EAAE;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAGrB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACNrB,OAAA;MAAMgB,SAAS,EAAC,0BAA0B;MAACQ,QAAQ,EAAEd,YAAa;MAAAO,QAAA,gBAChEjB,OAAA;QACEyB,IAAI,EAAC,MAAM;QACXT,SAAS,EAAC,sBAAsB;QAChCU,KAAK,EAAErB,KAAM;QACbsB,QAAQ,EAAGhB,CAAC,IAAKL,QAAQ,CAACK,CAAC,CAACiB,MAAM,CAACF,KAAK,CAAE;QAC1CG,WAAW,EAAC;MAAsB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClC,eACFrB,OAAA;QAAQyB,IAAI,EAAC,QAAQ;QAACT,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAE5D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACH;AAEV,CAAC;AAACnB,EAAA,CA/CID,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAiDnB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}